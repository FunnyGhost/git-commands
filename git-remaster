#!/bin/bash
 
#------------------------------------------------------------------------------#
#
# git-remaster
#
#   Rebases the current branch and updates the main branch at the same time,
#   preserving staged and unstaged changes in both.
#
#     git checkout my-branch
#     git remaster
#
#------------------------------------------------------------------------------#
 
set -e

MAIN_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD --short | sed 's,origin/,,')
BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [ -z $MAIN_BRANCH ]; then
    echo "No master/trunk branch found."
    exit 1
fi
 
# save current state to a detached commit object and reset
RSTASH=$(git stash create --include-untracked)

if [[ $RSTASH ]]; then
    echo "Stashed $RSTASH"
    git stash store -m "Remaster on branch $BRANCH $(date)" "$RSTASH"
	git reset --hard
fi
    
# fetch updates
if git fetch --no-tags origin $MAIN_BRANCH; then
    # if not on master branch, check it out, update and return to branch
    if [[ $BRANCH != $MAIN_BRANCH ]]; then
        git checkout $MAIN_BRANCH
        git rebase origin/$MAIN_BRANCH --rebase-merges
        git checkout -
    fi
    # rebase changes on top of origin/master
    git rebase origin/$MAIN_BRANCH --rebase-merges
fi
 
# bring back stash if available, hide errors when empty
if test $RSTASH; then
    git stash apply $RSTASH
fi
